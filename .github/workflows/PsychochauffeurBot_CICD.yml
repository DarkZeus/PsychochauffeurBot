name: PsychochauffeurBot CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        type: boolean
        default: false

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      env:
        USE_EMPTY_PROMPTS: "true"  # Forces tests to use prompts_empty.py
      run: |
        PYTHONPATH=$(pwd) pytest --ignore=tests/test_service.py
        
  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || inputs.deploy)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add host key
      run: |
        mkdir -p ~/.ssh
        if [ -n "${{ secrets.VM_HOST }}" ]; then
          ssh-keyscan ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
        else
          echo "Error: VM_HOST secret is not set"
          exit 1
        fi
        
    - name: Deploy to VM
      env:
        VM_USER: ${{ secrets.VM_USER }}
        VM_HOST: ${{ secrets.VM_HOST }}
        APP_DIR: ${{ secrets.APP_DIR }}
      run: |
        # Use the deployment script for existing installation
        ./scripts/deploy_existing.sh $VM_USER $VM_HOST $APP_DIR
        
    - name: Verify Deployment
      env:
        VM_USER: ${{ secrets.VM_USER }}
        VM_HOST: ${{ secrets.VM_HOST }}
        APP_DIR: ${{ secrets.APP_DIR }}
      run: |
        # Wait a bit for the bot to start up
        sleep 5
        
        # Check if the bot is running
        ssh $VM_USER@$VM_HOST "bash -s" << EOF
          cd $APP_DIR
          if [ -f bot.pid ] && ps -p \$(cat bot.pid) > /dev/null; then
            echo "Bot is running with PID \$(cat bot.pid)"
            exit 0
          else
            echo "Bot is not running!"
            exit 1
          fi
        EOF
